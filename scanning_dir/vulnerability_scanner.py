# This code work as as "advanced_scanner_level_1" except it will compare the 
# version of a software with a predefine file to find previously known vulnerabilities
# Will write this code a little bit different then usual to get info directly from system terminal or command line
# Notice!! Download a vulnerability list (text file) from online to detect vuln by scanning.

#!/usr/bin/python3

import socket
import os
import sys
import argparse
from termcolor import colored

def retBanner(ip, port):
    try:
        socket.setdefaulttimeout(2)
        sock = socket.socket()
        sock.connect((ip,port))
        banner = sock.recv(1024)
        return banner.decode()
    except:
        return


def checkVulns(banner,file, port):
    print(f"On port {port} : {banner}")
    file = open(file, 'r')
    for line in file.readlines():
        if banner.strip("\n") in line:
            print(colored(f"server is vulnerable on {port}: {banner}",'red'))


def main():
    parser =  argparse.ArgumentParser(description="This is vulnerability detector.")
    parser.add_argument('-i','--IP-ADDR',dest="tgtIP", metavar="<ip address>", help = "IP address of the target host or website address")
    parser.add_argument('-p',"--PORT",dest="tgtPorts", metavar="", default="21,22,80,443", help = "Port number to scan specific port [Optional]. defaults are 21,22,80,443")
    parser.add_argument('-f','--FILENAME',dest="tgtFile", metavar="<filename>", help= "specify a filename with path(path not needed if the file is in same folder)")

    args = parser.parse_args()
    
    # print(args)
    # print(f"the ip address: {args.tgtIP}")
    # print(f"the filename: {args.tgtFile}")
    # checkfile(args.tgtFile)

    if args.tgtIP != None and args.tgtFile != None:
        if not os.path.isfile(args.tgtFile):
            print(colored('[-] File not Exist!',"red"))
            exit(0)
        if not os.access(args.tgtFile, os.R_OK):
            print(colored("[-] User Don't have Access!",'red'))
            exit(0)
    else:
        parser.print_help()
        exit(0)
    portlist = args.tgtPorts.split(',')
    for port in portlist:
        banner = retBanner(args.tgtIP,int(port))
        if banner:
            checkVulns(banner, args.tgtFile, port)


if __name__ == "__main__":
    main()

# for using option in sys.argv we have to use another library "getopt"
# syntex: opts , args = getopt.getopt(sys.argv[1:], "f:m:", ['filename','message'])
# "f:m:" -> this are options 
# opts -> will provide key value pair (for loop can be used to get value)
# args -> will provide keyless value

# def main():
#     if len(sys.argv) >= 2:
#         vuln_filename = sys.argv[1]
#         if not os.path.isfile(vuln_filename):
#             print("[-] file does not Exist")
#             exit(0)
#         if not os.access(vuln_filename, os.R_OK):
#             print("[-] Access denied")
#             exit(0)
#         print(sys.argv)
#     else:
#         print("[=>] Usage: "+ str(sys.argv[0]) + "<vulnerable filename>")
#         exit(0)